kind: playground
name: k8s-tomcatrepl
base: "k8s-omni"
title: Kubernetes Cluster for Tomcat Cluster Replication
description: |-
  A multi-node Kubernetes cluster provisioned with kubeadm,
  allowing you to choose your preferred container runtime and networking plugin.
  Perfect for Apache Tomcat Kubernetes experiments.
cover: /playgrounds/k8s-multi-node/k8s-multi-node.png
categories:
- kubernetes
tagz:
- kubernetes-101
- java
markdown: ""
playground:
  machines:
  - name: dev-machine
    resources:
      cpuCount: 2
      ramSize: 4G
  - name: cplane-01
    resources:
      cpuCount: 2
      ramSize: 2G
  - name: node-01
    resources:
      cpuCount: 4
      ramSize: 4G
  - name: node-02
    resources:
      cpuCount: 4
      ramSize: 4G
  initTasks:
    init_cplane_00_configure_cni:
      name: init_cplane_00_configure_cni
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        cat > /etc/cni/net.d/99-loopback.conf <<EOF
        {
          "cniVersion": "1.1.0",
          "name": "lo",
          "type": "loopback"
        }
        EOF

        cat > /etc/cni/net.d/10-bridge.conf <<EOF
        {
          "cniVersion": "1.0.0",
          "name": "bridge",
          "type": "bridge",
          "bridge": "cni0",
          "isGateway": true,
          "ipMasq": true,
          "ipam": {
            "type": "host-local",
            "ranges": [
              [{"subnet": "10.244.0.0/24"}]
            ],
            "routes": [{"dst": "0.0.0.0/0"}]
          }
        }
        EOF
      conditions:
      - key: Networking plugin
        value: static
    init_cplane_00_configure_routes:
      name: init_cplane_00_configure_routes
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        ip route add 10.244.1.0/24 via 172.16.0.3  # node-01
        ip route add 10.244.2.0/24 via 172.16.0.4  # node-02
      conditions:
      - key: Networking plugin
        value: static
    init_cplane_10_containerd_install:
      name: init_cplane_10_containerd_install
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_00_configure_cni
      - init_cplane_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y containerd.io

        cat <<EOF > /etc/containerd/config.toml
        version = 2

        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            default_runtime_name = "runc"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        [plugins."io.containerd.grpc.v1.cri".cni]
          bin_dir = "/opt/cni/bin"
          conf_dir = "/etc/cni/net.d"
        EOF

        systemctl daemon-reload
        systemctl enable --now containerd
      conditions:
      - key: Container runtime
        value: containerd
    init_cplane_10_cri_o_install:
      name: init_cplane_10_cri_o_install
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_00_configure_cni
      - init_cplane_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y cri-o podman

        systemctl daemon-reload
        systemctl enable --now crio
      conditions:
      - key: Container runtime
        value: cri-o
    init_cplane_15_containerd_load_images:
      name: init_cplane_15_containerd_load_images
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_10_containerd_install
      run: |-
        for i in $(ls /opt/iximiuz-labs/images); do
          ctr -n k8s.io images import "/opt/iximiuz-labs/images/$i"
        done

        rm -rf /opt/iximiuz-labs/images
      conditions:
      - key: Container runtime
        value: containerd
    init_cplane_15_cri_o_load_images:
      name: init_cplane_15_cri_o_load_images
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_10_cri_o_install
      run: |-
        for i in $(ls /opt/iximiuz-labs/images); do
          podman load -i "/opt/iximiuz-labs/images/$i"
        done

        rm -rf /opt/iximiuz-labs/images
      conditions:
      - key: Container runtime
        value: cri-o
    init_cplane_20_kubeadm_init:
      name: init_cplane_20_kubeadm_init
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_15_containerd_load_images
      - init_cplane_15_cri_o_load_images
      run: |-
        cat >kubeadm-config.yaml<<EOF
        apiVersion: kubeadm.k8s.io/v1beta3
        kind: ClusterConfiguration
        kubernetesVersion: v1.33.0
        networking:
          podSubnet: "10.244.0.0/16"
        apiServer:
          extraArgs:
            feature-gates: "ImageVolume=true"
        controllerManager:
          extraArgs:
            feature-gates: "ImageVolume=true"
        scheduler:
          extraArgs:
            feature-gates: "ImageVolume=true"
        ---
        apiVersion: kubelet.config.k8s.io/v1beta1
        kind: KubeletConfiguration
        featureGates:
          ImageVolume: true
        EOF
        kubeadm init --config=kubeadm-config.yaml
    init_cplane_30_place_kubeconfig:
      name: init_cplane_30_place_kubeconfig
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_20_kubeadm_init
      run: |-
        mkdir /root/.kube
        ln -s /etc/kubernetes/admin.conf /root/.kube/config

        mkdir /home/laborant/.kube
        cp /etc/kubernetes/admin.conf /home/laborant/.kube/config
        chown -R laborant:laborant /home/laborant/.kube
    init_cplane_40_taint:
      name: init_cplane_40_taint
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_30_place_kubeconfig
      run: kubectl taint node cplane-01 node-role.kubernetes.io/control-plane:NoSchedule-
    init_cplane_50_calico_crds:
      name: init_cplane_50_calico_crds
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_50_calico_operator
      run: |-
        curl -s https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml | \
        yq eval 'select(.kind == "Installation") | .spec.calicoNetwork.ipPools[] |= (.cidr = "10.244.0.0/16")' - | \
        kubectl apply -f -

        curl -s https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml | \
        yq eval 'select(.kind != "Installation")' - | \
        kubectl apply -f -
      conditions:
      - key: Networking plugin
        value: calico
    init_cplane_50_calico_operator:
      name: init_cplane_50_calico_operator
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_40_taint
      run: 'kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml                '
      conditions:
      - key: Networking plugin
        value: calico
    init_cplane_50_cilium:
      name: init_cplane_50_cilium
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_40_taint
      run: |-
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
        CLI_ARCH=amd64
        if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi

        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
        sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
        rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}

        cilium install
      conditions:
      - key: Networking plugin
        value: cilium
    init_cplane_50_flannel:
      name: init_cplane_50_flannel
      machine: cplane-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_cplane_40_taint
      run: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      conditions:
      - key: Networking plugin
        value: flannel
    init_dev_machine_10_place_kubeconfig:
      name: init_dev_machine_10_place_kubeconfig
      machine: dev-machine
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        mkdir -p /root/.kube
        scp -o StrictHostKeyChecking=no cplane-01:/etc/kubernetes/admin.conf /root/.kube/config

        mkdir -p /home/laborant/.kube
        cp /root/.kube/config /home/laborant/.kube/config
        chown -R laborant:laborant /home/laborant/.kube
    init_dev_machine_20_install_calicoctl:
      name: init_dev_machine_20_install_calicoctl
      machine: dev-machine
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_dev_machine_10_place_kubeconfig
      run: |-
        curl -L https://github.com/projectcalico/calico/releases/download/v3.29.1/calicoctl-linux-amd64 -o /usr/local/bin/calicoctl
        chmod +x /usr/local/bin/calicoctl

        curl -L https://github.com/projectcalico/calico/releases/download/v3.29.1/calicoctl-linux-amd64 -o /usr/local/bin/kubectl-calico
        chmod +x /usr/local/bin/kubectl-calico
      conditions:
      - key: Networking plugin
        value: calico
    init_dev_machine_20_install_cilium:
      name: init_dev_machine_20_install_cilium
      machine: dev-machine
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_dev_machine_10_place_kubeconfig
      run: |-
        CILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)
        CLI_ARCH=amd64
        if [ "$(uname -m)" = "aarch64" ]; then CLI_ARCH=arm64; fi

        curl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
        sha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum
        tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin
        rm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}
      conditions:
      - key: Networking plugin
        value: cilium
    init_node1_00_configure_cni:
      name: init_node1_00_configure_cni
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        cat > /etc/cni/net.d/99-loopback.conf <<EOF
        {
          "cniVersion": "1.1.0",
          "name": "lo",
          "type": "loopback"
        }
        EOF

        cat > /etc/cni/net.d/10-bridge.conf <<EOF
        {
          "cniVersion": "1.0.0",
          "name": "bridge",
          "type": "bridge",
          "bridge": "cni0",
          "isGateway": true,
          "ipMasq": true,
          "ipam": {
            "type": "host-local",
            "ranges": [
              [{"subnet": "10.244.1.0/24"}]
            ],
            "routes": [{"dst": "0.0.0.0/0"}]
          }
        }
        EOF
      conditions:
      - key: Networking plugin
        value: static
    init_node1_00_configure_routes:
      name: init_node1_00_configure_routes
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        ip route add 10.244.0.0/24 via 172.16.0.2  # cplane-01
        ip route add 10.244.2.0/24 via 172.16.0.4  # node-02
      conditions:
      - key: Networking plugin
        value: static
    init_node1_10_containerd_install:
      name: init_node1_10_containerd_install
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_00_configure_cni
      - init_node1_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y containerd.io

        cat <<EOF > /etc/containerd/config.toml
        version = 2

        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            default_runtime_name = "runc"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        [plugins."io.containerd.grpc.v1.cri".cni]
          bin_dir = "/opt/cni/bin"
          conf_dir = "/etc/cni/net.d"
        EOF

        systemctl daemon-reload
        systemctl enable --now containerd
      conditions:
      - key: Container runtime
        value: containerd
    init_node1_10_cri_o_install:
      name: init_node1_10_cri_o_install
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_00_configure_cni
      - init_node1_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y cri-o podman

        systemctl daemon-reload
        systemctl enable --now crio
      conditions:
      - key: Container runtime
        value: cri-o
    init_node1_15_containerd_load_images:
      name: init_node1_15_containerd_load_images
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_10_containerd_install
      run: |-
        for i in $(ls /opt/iximiuz-labs/images); do
          ctr -n k8s.io images import "/opt/iximiuz-labs/images/$i"
        done

        rm -rf /opt/iximiuz-labs/images
      conditions:
      - key: Container runtime
        value: containerd
    init_node1_15_cri_o_load_images:
      name: init_node1_15_cri_o_load_images
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_10_cri_o_install
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y cri-o podman

        systemctl daemon-reload
        systemctl enable --now crio
      conditions:
      - key: Container runtime
        value: cri-o
    init_node1_20_place_kubeconfig:
      name: init_node1_20_place_kubeconfig
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_15_containerd_load_images
      - init_node1_15_cri_o_load_images
      run: |-
        mkdir -p /root/.kube
        scp -o StrictHostKeyChecking=no cplane-01:/etc/kubernetes/admin.conf /root/.kube/config

        mkdir -p /home/laborant/.kube
        cp /root/.kube/config /home/laborant/.kube/config
        chown -R laborant:laborant /home/laborant/.kube
    init_node1_40_join:
      name: init_node1_40_join
      machine: node-01
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node1_20_place_kubeconfig
      run: |-
        if kubectl get nodes/node-01; then
          exit 0
        fi

        eval "$(kubeadm token create --print-join-command)"
        sleep 1

        if ! kubectl get nodes/node-01; then
          exit 1
        fi
    init_node2_00_configure_cni:
      name: init_node2_00_configure_cni
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        cat > /etc/cni/net.d/99-loopback.conf <<EOF
        {
          "cniVersion": "1.1.0",
          "name": "lo",
          "type": "loopback"
        }
        EOF

        cat > /etc/cni/net.d/10-bridge.conf <<EOF
        {
          "cniVersion": "1.0.0",
          "name": "bridge",
          "type": "bridge",
          "bridge": "cni0",
          "isGateway": true,
          "ipMasq": true,
          "ipam": {
            "type": "host-local",
            "ranges": [
              [{"subnet": "10.244.2.0/24"}]
            ],
            "routes": [{"dst": "0.0.0.0/0"}]
          }
        }
        EOF
      conditions:
      - key: Networking plugin
        value: static
    init_node2_00_configure_routes:
      name: init_node2_00_configure_routes
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      run: |-
        ip route add 10.244.0.0/24 via 172.16.0.2  # cplane-01
        ip route add 10.244.1.0/24 via 172.16.0.3  # node-01
      conditions:
      - key: Networking plugin
        value: static
    init_node2_10_containerd_install:
      name: init_node2_10_containerd_install
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_00_configure_cni
      - init_node2_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y containerd.io

        cat <<EOF > /etc/containerd/config.toml
        version = 2

        [plugins."io.containerd.grpc.v1.cri"]
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
            default_runtime_name = "runc"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            SystemdCgroup = true
        [plugins."io.containerd.grpc.v1.cri".cni]
          bin_dir = "/opt/cni/bin"
          conf_dir = "/etc/cni/net.d"
        EOF

        systemctl daemon-reload
        systemctl enable --now containerd
      conditions:
      - key: Container runtime
        value: containerd
    init_node2_10_cri_o_install:
      name: init_node2_10_cri_o_install
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_00_configure_cni
      - init_node2_00_configure_routes
      run: |-
        cp -r /opt/iximiuz-labs/apt-cache/* /var/cache/apt/archives/
        apt-get install -y cri-o podman

        systemctl daemon-reload
        systemctl enable --now crio
      conditions:
      - key: Container runtime
        value: cri-o
    init_node2_15_containerd_load_images:
      name: init_node2_15_containerd_load_images
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_10_containerd_install
      run: |-
        for i in $(ls /opt/iximiuz-labs/images); do
          ctr -n k8s.io images import "/opt/iximiuz-labs/images/$i"
        done

        rm -rf /opt/iximiuz-labs/images
      conditions:
      - key: Container runtime
        value: containerd
    init_node2_15_cri_o_load_images:
      name: init_node2_15_cri_o_load_images
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_10_cri_o_install
      run: |-
        for i in $(ls /opt/iximiuz-labs/images); do
          podman load -i "/opt/iximiuz-labs/images/$i"
        done

        rm -rf /opt/iximiuz-labs/images
      conditions:
      - key: Container runtime
        value: cri-o
    init_node2_20_place_kubeconfig:
      name: init_node2_20_place_kubeconfig
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_15_containerd_load_images
      run: |-
        mkdir -p /root/.kube
        scp -o StrictHostKeyChecking=no cplane-01:/etc/kubernetes/admin.conf /root/.kube/config

        mkdir -p /home/laborant/.kube
        cp /root/.kube/config /home/laborant/.kube/config
        chown -R laborant:laborant /home/laborant/.kube
    init_node2_40_join:
      name: init_node2_40_join
      machine: node-02
      init: true
      user: root
      timeout_seconds: 300
      needs:
      - init_node2_20_place_kubeconfig
      run: |-
        if kubectl get nodes/node-02; then
          exit 0
        fi

        eval "$(kubeadm token create --print-join-command)"
        sleep 1

        if ! kubectl get nodes/node-02; then
          exit 1
        fi
  initConditions:
    values:
    - key: Container runtime
      default: cri-o
      options:
      - containerd
      - cri-o
    - key: Networking plugin
      default: cilium
      nullable: true
      options:
      - static
      - flannel
      - cilium
      - calico
  accessControl:
    canList:
    - anyone
    canRead:
    - anyone
    canStart:
    - anyone
